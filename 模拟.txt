#define _CRT_SECURE_NO_WARNINGS

#include<stdio.h>
#include <stdlib.h>
#include <string.h>

//c实现以下2个接口不能使用语言的基本分割组合函数
// (1)
// 字符串拆分成数组，如"ab&&2"通过"&&”做分隔符，
// 分割得到字符串数组[“ab","2”]实现字符串组合，
// 如[“ab","2”]通过"&&”分隔符，组合成字符串"ab&&2”
// (2)
//实现字符串组合，如[“ab","2”]通过” && "分隔符，组合成字符串"ab && 2”

//(1)
char** split_string(const char* str,const char* delimiter,int *count)
{
	 if (!str || !delimiter || !count) return NULL;
	int delimiter_len = strlen(delimiter);
	if (delimiter_len == 0) return NULL;
	*count = 1;
	const char* p = str;
	//遍历
	while ((p=strstr(p,delimiter))!=NULL) {
		(*count)++;
		p += delimiter_len;// p后移&&个字符串
	}
	char** result = (char**)malloc(*count *sizeof(char*));
	if (!result) return NULL;
	//分配指针数组 
	p = str;
	for (int i = 0; i < *count; i++) {
		const char* end = strstr(p,delimiter);
		if (!end)//没有找到&&说明已经末尾了
		{
			end = str + strlen(str);
		}
		int len = end - p;
		result[i] = (char*)malloc(len + 1);
		if (!result[i]) {
			// 分配失败，释放已分配的内存
			for (int j = 0; j < i; j++) free(result[j]);
			free(result);
			return NULL;
		}
		strncpy(result[i], p, len);
		result[i][len] = '\0';
		p = end + delimiter_len;
	}
	return result;
}

void free_split_result(char** result,int count) {
	if (!result) return;
	for (int i = 0; i < count; i++)
	{
		free(result[i]);
	}
	free(result);
}

char* join_string(char** strings,int count,const char* delimiter) {
	// 添加参数检查
	if (!strings || count <= 0 || !delimiter) return NULL;
	int delimiter_len = strlen(delimiter);
	int sum_len = 0;//总长度准备后序拼凑
	for (int i = 0; i < count;i++) {
		if (strings[i]) {
			sum_len += strlen(strings[i]);
			if (i < count - 1) sum_len += delimiter_len;
		}
	}
	char* result = (char*)malloc(sum_len+1);
	if (!result) return NULL;

	//组合字符串
	char* p = result;
	for (int i = 0; i < count; i++)
	{
		if (strings[i]) {
			int len = strlen(strings[i]);
			strncpy(p, strings[i], len);
			p += len;
			if (i < count - 1 && delimiter_len>0) {
				strncpy(p,delimiter,delimiter_len);
				p += delimiter_len;
			}
		}
	}
	*p = '\0';
	return result;
}


//释放顺序有问题

//int main() {
//	const char* test_str = "ab&&2&&test&&xyz";
//	const char* delimiter = "&&";
//	int count = 0;
//	char** parts = split_string(test_str,delimiter,&count);
//	for (int i = 0; i < count; i++)
//	{
//		printf("%d,%s\n", i, parts[i]);
//	}
//	free_split_result(parts,count);
//
//	//(2)
//	char* combined = join_string(parts,count,delimiter);
//	printf("%s:\n", combined);
//
//	free(combined);
//	return 0;
//}

int main() {
	const char* test_str = "ab&&2&&test&&xyz";
	const char* delimiter = "&&";
	int count = 0;

	// (1) 分割字符串
	char** parts = split_string(test_str, delimiter, &count);
	if (!parts) {
		printf("Split failed!\n");
		return 1;
	}

	// 打印分割结果
	for (int i = 0; i < count; i++) {
		printf("[%d] %s\n", i, parts[i]);
	}

	// (2) 组合字符串（必须在释放 parts 之前调用）
	char* combined = join_string(parts, count, delimiter);

	// 释放 parts（确保不再使用 parts）
	free_split_result(parts, count);

	// 打印组合结果
	if (combined) {
		printf("Combined: %s\n", combined);
		free(combined);  // 释放组合后的字符串
	}

	return 0;
}
